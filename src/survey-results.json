{
  "settings": {
    "version": "0.0.1",
    "score_type": "percentage",
    "score_tags": "disabled"
  },
  "sectionRecommendations": [
    {
      "name": "section_one",
      "icon": "code-branch",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "This excerpt from to the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that the following practices can improve the **version control**:\n> - Ensure that every commit to version control triggers the automated creation of packages that can be deployed to any environment using only information in version control.\n> - Make it possible to create production-like test environments on demand using only scripts and configuration information from version control, and to create packages using the automated process described in the previous approach.\n> - Script testing and production infrastructure so that teams can add capacity or recover from disasters in a fully automated fashion.\n*Learn more about [Version Control](https://cloud.google.com/solutions/devops/devops-tech-version-control)*\nBased on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), the following practices can improve the **code maintainability**:\n- **Team collaboration**. Teams need to access and recommend changes to each other. This helps transfer of knowledge and unblocks teams to make changes to other parts of the codebases.\n- **Traceability**. It is essential to rapidly trace packages or deployments to its version in the event of an incident. This is crucial to make change to any changes to debug problems triggered by a dependency in the codebase.\n- **Code quality**. Run cross-team code maintenance to improve internal quality and reduce people to refactor the codes. This requires making changes to multiple parts of the codebase.\n*Learn more about [Code Maintainability](https://cloud.google.com/solutions/devops/devops-tech-code-maintainability)*"
            ],
            "fr": [
              "À compléter",
              "À compléter",
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_two",
      "icon": "rocket",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Based on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), the following practices can improve the **Continuous Integration**:\n- **Automated Build Process**. Having automated scripts that has the ability to create packages and be deployed in any environment. The CI packages built must be authoritative and used in downstream processes. The builds should also be run daily as well as numbered and repeatable.\n- **A suite of automated tests**. To ensure the reliability the high-value functionality of your system, start writing a set of unit and acceptance test (if not done). This will guide to identify the issue if the test fail and to ensure all new functionality will not cause serious problems with the system.The tests should be rapidly done run daily.\n- **System run the build and automated tests**. The system status of the tests should be visible to the team. Avoid the use of email notification. Chat systems are a more popular way to notify the team.\n*Learn more about [Continuous Integration](https://cloud.google.com/solutions/devops/devops-tech-deployment-automation)*\nBased on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), to improve the **deployment automation**, teams should document existing deployment processes and incrementality simplify and automate them.\nThe following actions are required for this approach:\n- Packaging code in ways suitable for deployment.\n- Creating pre-configured virtual machine images or containers.\n- Automating the deployment and configuration of middleware.\n- Copying packages or files into the production environment.\n- Restarting servers, applications, or services.\n- Generating configuration files from templates.\n- Running automated deployment tests to make sure the system is working and correctly configured.\n- Running testing procedures.\n- Scripting and automating database migrations.\n*Learn more about [Deployment Automation](https://cloud.google.com/solutions/devops/devops-tech-test-automation)*\nThis excerpt from to the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that the following practices can improve the **Security quality**:\n>- **Conduct security reviews**.\nConduct a security review for all major features while ensuring that the security review process doesn't slow down development.\n>- **Build preapproved code**.\nHave the InfoSec team build preapproved, easy-to-consume libraries, packages, toolchains, and processes for developers and IT operations to use in their work.\n>- **Integrate security review into every phase**.\nIntegrate InfoSec into the daily work of the entire software delivery lifecycle.\nThis includes having the InfoSec team provide input during the design of the application, attending software demos, and providing feedback during demos.\n>- **Test for security**.\nTest security requirements as a part of the automated testing process including areas where preapproved code should be used.\n>- **Invite InfoSec to demos**.\nIf you include the InfoSec team in your application demos, they can spot security-related weaknesses early, which gives the team ample time to fix.\n*Learn more about [Security Quality](https://cloud.google.com/solutions/devops/devops-tech-shifting-left-on-security)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_three",
      "icon": "infinity",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Based on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), the following concepts can improve the quality of evaluating the functionality and architecture of the system, it's important to consider the organizational and technical components:\nOrganizational\n- Allow testers to work alongside developers throughout the software development and delivery process.\n- Perform manual test activities such as exploratory testing, usability testing, and acceptance testing throughout the delivery process.\nTechnical\nBuilding and maintaining a set of key automated test suites such as Units Tests and acceptance tests.\nIf you have limited test automation, start building a skeleton deployment pipeline which includes:\n- Single unit test\n- Single acceptance test\n- Automated deployments scripts for a exploratory test environments\n- Increase test coverage and extend the deployments product as the product or service evolves\nIt is also recommended to write your **unit tests** before writing code to improve the code are testable and the tests are maintainable.\nFinally, you can write a small number of **acceptance tests** for the high-value functionality.\nMake sure you require developers to write unit and acceptance tests for any new functionality, and any functionality you are changing.\n*Learn more about [Continuous Testing](https://cloud.google.com/solutions/devops/devops-tech-test-automation)*\nThis excerpt from to the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that the following practices can effectively and efficiently improve the **Test Data Management**:\n> 1. Favor unit tests.\nUnit tests should be independent of each other and any other part of the system except the code being tested.\nUnit tests should not depend on external data. As defined by the test automation pyramid, unit tests should make up the majority of your tests. Well-written unit tests that run against a well-designed codebase are much easier to triage and cheaper to maintain than higher-level tests. Increasing the coverage of your unit tests can help minimize your reliance on higher-level tests that consume external data.\n> ![Test automation pyramid.](assets/images/devops-tech-test-automation-pyramid.svg){:height='80%' width='80%' margin-top='2em' margin-bottom='2em'}\n> 2. Minimize reliance on test data.\nTest data requires careful and ongoing maintenance.\nAs your APIs and interfaces evolve, you must update or re-create related test data.\nThis process represents a cost that can negatively impact team velocity.\nHence, it's good practice to minimize the amount of test data needed to run automated tests.\n> 3. Isolate your test data.\nRun your tests in well-defined environments with controlled inputs and expected outputs that can be compared to actual outputs.\nMake sure that data consumed by a particular test is explicitly associated with that test, and isn't modified by other tests or processes.\nWherever possible, your tests should create the necessary state themselves as part of setup, using the application's APIs.\nIsolating your test data is also a prerequisite for tests to run in parallel.\n> 4. Minimize reliance on test data stored in databases.\nMaintaining test data stored in databases can be particularly challenging for the following reasons:\n>    1. **Poor test isolation**.\nDatabases store data durably; any changes to the data will persist across tests unless explicitly reset.\nLess reliable test inputs make test isolation more difficult, and can prevent parallelization.\n>    2. **Performance impact**.\nSpeed of execution is a key requirement for automated tests.\nInteracting with a database is typically slower and more cumbersome than interacting with locally stored data.\nFavor in-memory databases where appropriate.\n> 5. Make test data readily available.\nRunning tests against a copy of a full production database introduces risk.\nIt can be challenging and slow to get the data refreshed.\nAs a result, the data can become out of date.\nProduction data can also contain sensitive information.\nInstead, identify relevant sections of data that the tests require.\nExport these sections regularly and make them easily available to tests.\n*Learn more about [Test Data Management](https://cloud.google.com/solutions/devops/devops-tech-test-data-management)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_four",
      "icon": "sitemap",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Based on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), the following recommendations can improve the developer productivity, deployment outcomes and overall **architecture**:\n- **Evolutionary architecture**. An iterative approach to improving the design of your enterprise system. This will lead successful products and services to re-architect during their lifecycle due to the changing requirements placed on them.\nBefore transforming a functionality into a service, they need to consist of the traits below:\n- Implements a single business function or capability.\n- Performs its function with minimal interaction with other services.\n- Is built, scaled, and deployed independently from other services.\n- Interacts with other services by using lightweight communication methods, for example, a message bus or HTTP endpoints.\n- Can be implemented with different tools, programming languages, data stores, and so on\n*Learn more about [Architecture](https://cloud.google.com/solutions/devops/devops-tech-architecture)*\n\nThe following excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) provides recommendations to make sure **the team is empowered** to make tool and technology decisions:\n>- **Periodically assess the tech stack**.\nDuring assessments, encourage team members to critically evaluate how well the current tools address requirements.\nAdditionally, during these reviews, discuss issues with the existing tools and potential new tool experimentation can be discussed and planned.\n>- **Proactively investigate new tools for new projects**.\nHave members of the teams think about and experiment with new tools to determine whether those tools are worth supporting.\nTry implementing a key piece of the new system using both existing and proposed technologies to see whether the expected benefits materialize.\nWhen you select technologies, have a good understanding of the costs associated with the technology. These might include licensing, support, and the infrastructure required to run the tools. You might also need to hire more people to help with adopting and maintaining the technology.\n>- **Schedule time to experiment with new tools**.\nPeriodically, hold sessions (such as hackathons) where teams can play around with new projects and new technologies.\nNot all tools will be kept as a result of these experiments.\nBut the important point is that you're easing these new technologies into your stack or decide they aren't appropriate.\n>- **Hold regular presentations to discuss new tools**.\nSponsor organized meetings (such as lunch meetings) where new tech is presented and discussed.\nThey can be informal meetings where one person does a presentation about a project they are working on in a new tech, or something they are investigating.\nInformal meetings like these are a good way for the group to talk about new technologies and stay up to date.\nA good approach is to rotate the presentations, with team members taking turns presenting Or you can invite people from other teams or someone from outside of the company to present.\nIncluding people from outside the organization can be particularly helpful, because if they have experience with a tool, they can discuss hidden costs and complexities that will only be apparent after longer-term use.\n*Learn more about [Empowering teams to choose tools](https://cloud.google.com/solutions/devops/devops-tech-teams-empowered-to-choose-tools)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_five",
      "icon": "cloud",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Based on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities),to achieve more rapid, reliable releases, and higher levels of availability, velocity, and reliability of the **Cloud Infrastructure**, the key actions below need to be considered:\n- **Close collaboration** with developers, operations teams, information security, procurement, and finance. This will assist to identify and resolve any concerns or conflicts to substantial changes in adopting cloud-native processes and practices.\n- **Adopting Infrastructure-as-code** .This allows Infrastructure configuration to run version control, and developers can provision environments, make configuration changes, and execute deployments through an automated mechanism. Additional, consider the requirements to be assessed such as the engineering effort and process change, including changing policies for implementing information security controls.\n*To learn more about [Cloud Infrastructure](https://cloud.google.com/solutions/devops/devops-tech-cloud-infrastructure)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_six",
      "icon": "vials",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "The following excerpt of the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that the following practices can improve your **team experimentation**:\n>- **Hold regular hackathons.** Hackathons are opportunities for the team to experiment and to work with and share ideas. They also have the added benefit of letting your team work with new technologies and tools.\n>- **Encourage teams to iterate on and continually improve solutions to foster experimentation.** Many times the first solution to a problem isn't the best. Improvements to one service or feature often yield improvements in others.\n>- **Allow developers and operators to talk to and observe customers.** This kind of interaction provides more context and information that teams can use to solve problems and develop new ideas.\n*Learn more about [Team experimentation](https://cloud.google.com/solutions/devops/devops-process-team-experimentation)*\nThis excerpt of the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that to improve your **change approval processes**, focus on implementing the following:\n>1. Moving to a peer-review based process for individual changes, enforced at code check-in time, and supported by automated tests.\n>1. Finding ways to discover problems such as regressions, performance problems, and security issues in an automated fashion as soon as possible after changes are committed.\n>1. Performing ongoing analysis to detect and flag high risk changes early on so that they can be subjected to additional scrutiny.\n>1. Looking at the change process end-to-end, identifying bottlenecks, and experimenting with ways to shift validations into the development platform.\n>1. Implementing information security controls at the platform and infrastructure layer and in the development tool chain, rather than reviewing them manually as part of the software delivery process.\n*Learn more about [Streamlining change approval](https://cloud.google.com/solutions/devops/devops-process-streamlining-change-approval)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_seven",
      "icon": "eye",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Increased engagement with customers and participation in product management processes contributes to stronger identification with your organization's goals and values.\nBased on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), a team should use the following pattern in order to maximize their chances of successfully solving **customer problems**:\n- Gather customer feedback first, before defining any potential features.\n- Validate that you're solving a real problem.\n- Iterate on a solution that actually solves that problem (and nothing more).\n- Ensure the solution results in a viable business (for example, the cost is less than the anticipated revenue).\n- Track key metrics to gauge success.\n- Iterate through the above to improve those metrics.\n*Learn more about [Customer feedback...](https://cloud.google.com/solutions/devops/devops-process-customer-feedback)*\nThe following excerpt of the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) proposes that to improve **work visibility** you should:\n- **Provide tools for visualizing and recording workflow.** Start with making sure the team has visual management displays that show their work and its flow through the part of the value stream that is closest to them, including both the upstream and downstream parts of the process. Record how long it takes work to get through the process, and how often rework must be performed because the team didn't get it right the first time. This will uncover your early and best opportunities for improvement at the team level.\n- **Create a value stream map.** Work with other teams to perform a value-stream mapping exercise to discover how work flows from idea to customer outcome, and report the VSM metrics (lead time, process time, %C/A) for each process block. Have the team prepare a future-state value stream map and work to implement it.\n- **Share artifacts.** Make sure the artifacts from these exercises are available to everyone in the organization, and that they are updated at least annually.\n*Learn more about [Visibility of work in the value stream](https://cloud.google.com/solutions/devops/devops-process-work-visibility-in-value-stream)*\n**Working in small batches** is an essential principle in any discipline where feedback loops are important, or you want to learn quickly from your decisions. Research recommends that each feature or batch of work follow the agile concept:\n- **Independent.** Make batches of work as independent as possible from other batches, so that teams can work on them in any order, and deploy and validate them independent of other batches of work.\n- **Negotiable.** Each batch of work is iterable and can be renegotiated as feedback is received.\n- **Valuable.** Discrete batches of work are usable and provide value to the stakeholders.\n- **Estimable.** Enough information exists about the batches of work that you can easily estimate the scope.\n- **Small.** During a sprint, you should be able to complete batches of work in small increments of time, meaning hours to a couple days.\n- **Testable.** Each batch of work can be tested, monitored, and verified as working in the way users expect.\n*Learn more about [Working in small batches...](https://cloud.google.com/solutions/devops/devops-process-working-in-small-batches)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_eight",
      "icon": "database",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "This excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that in order to improve team **monitoring effectiveness**, you should focus efforts on two main areas:\n>- **Collecting data from key areas throughout the value chain.**\nBy analysing the data that you collect and doing a gap analysis, you can help ensure that you collect the right data for your organization.\n>- **Using the collected data to make business decisions.**\nThe data that you collect should drive value across the organization, and the metrics that you select must be meaningful to your organization.\nMeaningful data can be used by many teams, from DevOps to Finance.\nIt's also important to find the right medium to display the monitoring information.\nDifferent uses for the information demand different presentation choices.\nReal-time dashboards might be most useful to the DevOps team, while regularly generated business reports might be useful for metrics measured over a longer period.\nThe most important thing is to ensure the data is available, shared, and used to guide decisions.\nIf the best you can do to kick things off is a shared spreadsheet, use that.\nThen graduate to fancy dashboards later.\nDon't let perfect be the enemy of good enough.\n*Learn more about [Monitoring systems to inform business decisions](https://cloud.google.com/solutions/devops/devops-measurement-monitoring-systems)*\nBased on the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities), to improve **monitoring and observability**, your teams should have the following:\n- Reporting on the overall health of systems (Are my systems functioning? Do my systems have sufficient resources available?).\n- Reporting on system state as experienced by customers (Do my customers know if my system is down and have a bad experience?).\n- Monitoring for key business and systems metrics.\n- Tooling to help you understand and debug your systems in production.\n- Tooling to find information about things you did not previously know (that is, you can identify unknown unknowns).\n- Access to tools and data that help trace, understand, and diagnose infrastructure problems in your production environment, including interactions between services.\nHere are a few key measures to validate an effective implementation of monitoring and observability.\n- Your monitoring should tell you what is broken and help you understand why, before too much damage is done.\n- The key metric in the event of an outage or service degradation is time-to-restore (TTR).\n- A key contributor to TTR is the ability to rapidly understand what broke and the quickest path to restoring service (which may not involve immediately remediating the underlying problems).\n*Learn more about [Monitoring and observability](https://cloud.google.com/solutions/devops/devops-measurement-monitoring-and-observability)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_nine",
      "icon": "briefcase",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "This excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) explains improve **work in process limits** when faced with too much work and too few people to do it:\n>- **Make your work visible.**\nAs you do this, try to surface all of your work, making all of it visible, to several teams and stakeholders. (See [visual displays](https://cloud.google.com/solutions/devops/devops-measurement-visual-management) for details).\n>- **Set WIP limits that match your team's capacity for work.**\n>   - Account for activities like production support, meeting time and technical debt.\n>   - Don't allow more WIP in any given part of the process than you have people to work on tasks.\n>   - Don't require people to split their time between multiple tasks.\n>   - When a particular piece of work is completed, move the card representing that work to the next column, and pull the highest priority piece of work waiting in the queue.\n>- **Set up a weekly meeting for stakeholders to prioritize all work in order.**\nLet stakeholders know that if they don't attend, their work won't get done.\n>- **Work to increase flow.**\nMeasure the lead time of work through the system.\nRecord the date that work started on a card and the date work ended.\nFrom this information, you can create a running frequency histogram, which shows the number of days work takes to go through the system.\nThis data will allow you to calculate the mean lead time, as well as variability, with the goal of having low variability: high variability means you are not scoping projects well or have significant constraints outside of your team. High variability also means your estimates and predictions about future work will not be as reliable.\n>- **Improve work processes.**\nReduce hand-offs, simplify and automate tasks, and think about how to collaborate better to get work done.\nAfter you've removed some obstacles and things feel comfortable, reduce your WIP limits to reveal the next set of obstacles.\nThe ideal is single-piece flow, which means that work flows from idea to customer with minimal wait time or rework.\nThis ideal may not be achievable, but it acts as a 'true north' to guide the way in a process of continuous improvement.\n*Learn more about [Work in process limits...](https://cloud.google.com/solutions/devops/devops-measurement-wip-limits)*\nThis excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) explains that to improve effectiveness in **visual management**, systems must do the following:\n>- **Reflect information that the team cares about and will act on.**\nHaving build monitors does no good if teams don't care whether the display shows an issue (for example, showing that the build status is red, meaning broken), and won't actually act on this information by swarming to fix the issue.\n>- **Be easy to understand.**\nIt should be possible to tell at a glance from across the room whether something needs attention.\nIf there is a problem, teams should know how to perform further diagnosis or fix the problem.\n>- **Give the team information that is relevant to their work.**\nWhile it's important to collect as much data as possible about the team's work, the display should present only data that is relevant to the team's goals.\nIn the face of information overload, particularly information that cannot be acted upon, people ignore visual management displays; the displays just become noise.\nThe additional data can be accessed and used by the team when they are swarming to fix the problem.\n>- **Be updated as part of daily work.**\nIf the team lets the data go stale or become inaccurate, they will ignore the visual displays, and the displays will no longer be a useful beacon when important issues arise.\nIf displays are currently displaying stale or inaccurate data, investigate the cause: is the data not related to the team's goals?\nWhat data would make the display an important and compelling information source for the team?\n*Learn more about [Visual management capabilities...](https://cloud.google.com/solutions/devops/devops-measurement-visual-management)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_ten",
      "icon": "graduation-cap",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "This excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) indicates that in order to improve **employees job satisfaction**, the following key actions should be taken:\n>- **Give employees the tools and resources needed to do their work.**\nEmployees must have the tools necessary to get their work done, and teams that can decide which tools they use do better at continuous delivery.\nTeams that can choose their own tools make these choices based on how they work, and on the tasks they need to perform.\nNo one knows better than practitioners what they need to be effective, so it's not surprising that practitioner tool choice helps to drive better outcomes.\nEmployees must also have the resources necessary to do their work.\nThose might be technical resources, such as access to servers or environments necessary to develop and test, or resources needed to learn and develop new skills, such as access to course materials and budget to attend trainings or technical conferences.\n>- **Give employees meaningful work that leverages their expertise.**\nThe importance of meaningful work can't be overstated.\nIn some studies, employees have rated the importance of meaningful work just as highly as the importance of salary.\nMeaningful work makes a difference and is often very personal.\n*Learn more about [Job satisfaction](https://cloud.google.com/solutions/devops/devops-culture-job-satisfaction)*\nThis excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) suggests that in order **to change the way people work**, the following practices can be implemented to improve your organizational culture:\n>- **High cooperation.**\nCreate cross-functional teams that include representatives from each functional area of the software delivery process (business analysts, developers, quality engineers, ops, security, and so on).\nThis practice lets everyone share the responsibility for building, deploying, and maintaining a product.\nIt's also important that there is good cooperation within the team.\n>- **Train the messengers.**\nThis means we want people to bring us bad news so we can make things better.\nHold blameless post mortems.\nBy removing blame, you remove fear; and by removing fear, you enable teams to surface problems and solve them more effectively.\nAlso create and foster an environment where it is safe to take smart risks and fail, so that anyone can surface problems at any time—even without the ceremony of a post mortem.\n>- **Share risks.**\nAlong with this, encourage shared responsibilities.\nQuality, availability, reliability and security are everyone's job.\nOne way to improve the quality of your services is to ensure that developers share responsibility for maintaining their code in production.\nThe improvement in collaboration that comes from sharing responsibility inherently reduces risk:\nThe more eyes on the software delivery process, the more you'll avoid errors in process or planning.\nAutomation also reduces risk, and with the right tool choice, can enable collaboration.\n>- **Encourage bridging.**\nBreak down silos.\nIn addition to creating cross-functional teams, techniques for breaking down silos include co-locating ops with the dev team; including ops in planning throughout the software delivery lifecycle; and implementing ChatOps.\nAnother tip is to identify someone in the organization whose work you don't understand (or whose work frustrates you, like procurement) and invite them to coffee or lunch.\nInformal discussions help foster better communication, and you may understand why they do what they do—and you can come up with creative solutions together.\n>- **Let failure lead to inquiry.**\nAgain, hold blameless post mortems.\nThe response to failure shapes the culture of an organization.\nBlaming individuals for failures creates a negative culture.\nIf instead, failures lead you to ask questions about what caused the failures and how you can keep them from happening again in the future, you've improved your technical system, your processes, and your culture.\n>- **Implement novelty.**\nEncourage experimentation.\nGiving employees freedom to explore new ideas can lead to great outcomes.\nSome companies give engineers time each week for experimentation.\nOthers host internal hack days or mini-conferences to share ideas and collaborate.\nMany new features and products began this way.\nWhen you release your employees from habitual pathways and repetitive tasks, they can generate enormous value for your organization.\nAnd remember that novelty isn't limited to new products and features.\nAlso encourage and reward improvements in process and ideas that help foster collaboration.\n*Learn more about [Westrum organizational culture](https://cloud.google.com/solutions/devops/devops-culture-westrum-organizational-culture)*\nContinuing to build a climate for learning is directly related to how an organization encourages and invests in learning. This excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) presents some ways an organization can show that learning is important and necessary for growth:\n>- **Have regular lunchtime meetings ('brown bags') where one person presents about a project they are working on in a new tech, or something they are investigating.**\nRotate the presentations among team members and reward people for presenting.\n>- **When people attend conferences, have them share the new ideas through presentations or trip reports.**\nYou can even host regular meetups or mini-conferences to increase networking and exposure to new technologies and ideas.\n>- **Encourage people to get certifications or external trainings.**\nYou can help with this by covering costs of external trainings and forming study groups that are a part of normal work activity.\n*Learn more about [Learning culture](https://cloud.google.com/solutions/devops/devops-culture-learning-culture)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    },
    {
      "name": "section_eleven",
      "icon": "random",
      "recommendations": [
        {
          "level": "1",
          "type": "list",
          "title": {
            "en": [
              "Your organization can follow some general principles in order to increase your chances of success in **transformational leadership**. This excerpt from the [DORA DevOps capabilities guides](https://cloud.google.com/solutions/devops/capabilities) presents some key principles:\n>- **Improvement work is never done.**\nHigh-performing organizations are never satisfied with their performance and are always trying to get better at what they do.\nImprovement work is ongoing and baked into the daily work of teams.\nPeople in these organizations understand that failing to change is as risky as change, and they don't use 'that's the way we've always done it' as a justification for resisting change.\nHowever that doesn't mean taking an undisciplined approach to change.\nChange management should be performed in a scientific way in pursuit of a measurable team or organizational goal.\n>- **Leaders and teams agree on and communicate measurable outcomes, and teams determine how to achieve them.**\nIt's essential that everybody in the organization knows the measurable business and organizational outcomes that they are working towards.\nThese outcomes should be short (a few sentences at most) at the organizational level, and match up clearly to the purpose and mission of the organization.\nAt the level of an individual business unit, the outcomes should fit on a single page.\nThe organizational outcomes should be decided by leaders and teams working together, although leaders have the ultimate authority.\nAt lower levels of the organization, goals are stated in more detail and with shorter horizons.\n>- **Large-scale change is achieved iteratively and incrementally.**\nThe annual budgeting cycle tends to drive organizations towards a project-based model in which work of all kinds is tied to expensive projects that take a long time to deliver.\nWith few exceptions, it's better to break work down into smaller pieces that can be delivered incrementally.\nWorking in small batches delivers a host of benefits.\nThe most important is that it lets organizations correct course based on what they discover.\nThis avoids wasting time and money doing work that doesn't deliver the expected benefits.\n*Learn more about [Transformational leadership](https://cloud.google.com/solutions/devops/devops-culture-transformational-leadership) and [How to transform](https://cloud.google.com/solutions/devops/devops-culture-transform)*"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "3",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        },
        {
          "level": "5",
          "type": "list",
          "title": {
            "en": [
              "TBC"
            ],
            "fr": [
              "À compléter"
            ]
          }
        }
      ]
    }
  ],
  "performance": [
    {
      "level": "low",
      "title": {
        "en": "Low",
        "fr": "Faible"
      },
      "message": {
        "en": "Based on your answers, it appears that some elements could be improved. Here are a few recommendations.",
        "fr": "Selon vos réponses, il semblerait que certains éléments pourraient être améliorés. Voici quelques recommandations."
      }
    },
    {
      "level": "medium",
      "title": {
        "en": "Medium",
        "fr": "Moyen"
      },
      "message": {
        "en": "Based on your answers, you seem to have incorporated some key elements in your practice. Here are recommendations that may help you reach the next level!",
        "fr": "Selon vos réponses, vous semblez avoir incorporé certains éléments clés dans votre pratique. Voici quelques recommandations"
      }
    },
    {
      "level": "high",
      "title": {
        "en": "High",
        "fr": "Élevé"
      },
      "message": {
        "en": "You seem to have incorporate many key elements in your practice. Congratulations!",
        "fr": "À compléter"
      }
    }
  ]
}